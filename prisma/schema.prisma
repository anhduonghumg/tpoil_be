// =======================================
// Datasource & Generator
// =======================================
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =======================================
// Enums
// =======================================
enum EmployeeStatus {
  active
  inactive
  suspended
  probation
  terminated
}

enum Gender {
  male
  female
  other
}

enum DepartmentType {
  board
  office
  group
  branch
}

enum ManagerRole {
  head
  deputy
  acting
}

enum ScopeType {
  global
  department
  site
  employee
}

enum ExportFormat {
  csv
  xlsx
  pdf
}

enum JobStatus {
  queued
  running
  done
  failed
  partial
}

enum ImportMode {
  append
  upsert
  replace
}

// =======================================
// Auth (User)
// =======================================
model User {
  id          String    @id @default(uuid()) @db.Uuid
  username    String    @unique
  email       String    @unique // work email
  password    String
  name        String?
  isActive    Boolean   @default(true)
  lastLoginAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employee     Employee?
  roleBindings UserRoleBinding[]
}

// =======================================
// Employee – Hồ sơ nhân sự
// =======================================
model Employee {
  id   String @id @default(uuid()) @db.Uuid
  code String @unique

  userId String? @unique @db.Uuid
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  fullName      String?
  phone         String?
  workEmail     String?
  personalEmail String?        @unique
  status        EmployeeStatus @default(active)
  gender        Gender?
  nationality   String?
  maritalStatus String?

  title String?
  grade String?
  floor Int?
  desk  String?

  siteId String? @db.Uuid
  site   Site?   @relation(fields: [siteId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  // Self relation: nhân viên -> quản lý (và quản lý -> danh sách cấp dưới)
  managerId    String?    @db.Uuid
  manager      Employee?  @relation("EmpManagerLine", fields: [managerId], references: [id], onDelete: SetNull)
  subordinates Employee[] @relation("EmpManagerLine")

  dob      DateTime?
  joinedAt DateTime?
  leftAt   DateTime?

  avatarUrl    String?
  accessCardId String? @unique

  addressPermanent String?
  addressCurrent   String?

  banking   Json?
  citizen   Json?
  emergency Json?
  tax       Json?

  memberships  EmployeeDepartment[]
  managerRoles DepartmentManager[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([status])
  @@index([deletedAt])
  @@index([code])
}

// =======================================
// Danh mục Site / Area
// =======================================
model Area {
  id    String @id @default(uuid()) @db.Uuid
  code  String @unique
  name  String
  sites Site[]
}

model Site {
  id     String  @id @default(uuid()) @db.Uuid
  code   String  @unique
  name   String
  areaId String? @db.Uuid
  area   Area?   @relation(fields: [areaId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  departments Department[]
  Employee    Employee[]
}

// =======================================
// Department – Phòng ban nhiều cấp
// =======================================
model Department {
  id   String         @id @default(uuid()) @db.Uuid
  code String         @unique
  name String
  type DepartmentType

  parentId String?      @db.Uuid
  parent   Department?  @relation("DeptHierarchy", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  children Department[] @relation("DeptHierarchy")

  siteId String? @db.Uuid
  site   Site?   @relation(fields: [siteId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  costCenter String?

  members  EmployeeDepartment[]
  managers DepartmentManager[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  createdBy String?
  updatedBy String?
  deletedBy String?

  @@index([parentId])
  @@index([siteId])
  @@index([deletedAt])
}

// =======================================
// Liên kết nhân viên - phòng ban (membership)
// =======================================
model EmployeeDepartment {
  id           String @id @default(uuid()) @db.Uuid
  employeeId   String @db.Uuid
  departmentId String @db.Uuid

  isPrimary Boolean   @default(false)
  startDate DateTime  @default(now())
  endDate   DateTime?

  employee   Employee   @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  department Department @relation(fields: [departmentId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId, isPrimary])
  @@index([departmentId, startDate, endDate])
  @@index([employeeId, startDate, endDate])
}

// =======================================
// Quản lý trưởng/phó phòng
// =======================================
model DepartmentManager {
  id           String      @id @default(uuid()) @db.Uuid
  departmentId String      @db.Uuid
  employeeId   String      @db.Uuid
  role         ManagerRole
  startDate    DateTime    @default(now())
  endDate      DateTime?

  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employee   Employee   @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([departmentId, startDate, endDate])
  @@index([employeeId, startDate, endDate])
  @@index([departmentId, role, startDate, endDate])
}

// =======================================
// RBAC + Scope
// =======================================
model Module {
  id          String       @id @default(uuid()) @db.Uuid
  code        String       @unique
  name        String
  permissions Permission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Permission {
  id        String           @id @default(uuid()) @db.Uuid
  code      String           @unique
  name      String
  moduleId  String           @db.Uuid
  module    Module           @relation(fields: [moduleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roles     RolePermission[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([moduleId])
}

model Role {
  id        String            @id @default(uuid()) @db.Uuid
  code      String            @unique
  name      String
  desc      String?
  perms     RolePermission[]
  bindings  UserRoleBinding[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model RolePermission {
  roleId       String     @db.Uuid
  permissionId String     @db.Uuid
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([roleId, permissionId])
  @@index([permissionId])
}

model UserRoleBinding {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @db.Uuid
  roleId    String    @db.Uuid
  scopeType ScopeType
  scopeId   String?
  startAt   DateTime  @default(now())
  endAt     DateTime?

  createdBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@index([roleId])
  @@index([scopeType, scopeId])
  @@index([startAt, endAt])
}

// =======================================
// Audit Log
// =======================================
model AuditLog {
  id String @id @default(uuid()) @db.Uuid

  // request-level
  requestId  String?
  at         DateTime @default(now())
  userId     String?
  ip         String?
  ua         String?
  method     String?
  path       String?
  statusCode Int?

  // business-level
  moduleCode String?
  permission String?
  action     String?
  entityId   String?
  scopeType  ScopeType?
  scopeId    String?

  // data snapshots
  before Json?
  after  Json?
  diff   Json?
  error  Json?

  @@index([userId, at])
  @@index([moduleCode, action, at])
  @@index([entityId])
}

// =======================================
// Export / Import Jobs
// =======================================
model ExportJob {
  id         String       @id @default(uuid()) @db.Uuid
  moduleCode String
  format     ExportFormat
  filter     Json?
  status     JobStatus    @default(queued)
  fileUrl    String?
  error      String?

  createdBy  String
  createdAt  DateTime  @default(now())
  finishedAt DateTime?

  @@index([moduleCode, status, createdBy, createdAt])
}

model ImportJob {
  id         String     @id @default(uuid()) @db.Uuid
  moduleCode String
  mode       ImportMode
  mapping    Json?
  status     JobStatus  @default(queued)
  total      Int?
  success    Int?
  failed     Int?
  srcFileUrl String?
  reportUrl  String?
  error      String?

  createdBy  String
  createdAt  DateTime  @default(now())
  finishedAt DateTime?

  @@index([moduleCode, status, createdBy, createdAt])
}

model LoginAttempt {
  id        String   @id @default(uuid()) @db.Uuid
  email     String
  ok        Boolean
  ip        String?
  ua        String?
  createdAt DateTime @default(now())
}
